#!/bin/bash

function _initial_setup() {
    if [ "$(type -t go)" = "function" ]; then
        echo "Go is already present in your environment"
    else
        echo "if [ -f $DOTFILES/bash/go ]; then
    unset go_bookmarks
    source $DOTFILES/bash/go
    declare -A go_bookmarks=$($DOTFILES/bash/go_bookmarks)
fi" >> ~/.bash_profile
        echo "Go is added to your .bash_profile. Make sure to run 'source ~/.bash_profile'!"
    fi
}

if [ "$1" = "--setup" ]; then
    _initial_setup
elif [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    echo "Execute 'bash go --setup' to run setup for go. Execute 'go -h' to see how to use go."
fi

function go() {
    local usage="Usage:
    go bookmark
    go [--create|-c --delete|-d] bookmark
    go [--list|-l]
    go [--release|-r] release"

    local behavior="Behavior:
    Go to the indicated bookmark (if it exists) or directory (if no such bookmark exists)
    With --create, create a bookmark with the given name that points to the current directory
    With --delete, delete the bookmark with the given name
    With --list, list all currently existing bookmarks
    With --release, change all existing bookmarks that point to destinations in p4/builds/* so they point to the given release"

    # track creation and deletion actions separately so they can both be provided
    # for the purpose of replacing an existing bookmark with a new one
    local create=0
    local delete=0
	local echo=0
	local have_taken_action=0
    local program=''

    local argsdefinition="c-:d-:e-:h-:l-:r-:p-:"

    # allow the function to be run multiple times
    local OPTIND arg

    while getopts "$argsdefinition" arg; do
        case "${arg}" in
            -)
                case "${OPTARG}" in
                    create)
                        create=1
                        ;;
					echo)
						echo=1
						;;
                    delete)
                        delete=1
                        ;;
                    list)
                        _list_bookmarks
                        return 0
                        ;;
                    program)
                        program="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    release)
                        argvalue="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        _set_bookmark_releases $argvalue
                        return 0
                        ;;
                    setup)
                        _initial_setup
                        return 0
                        ;;
                    help)
						_echo_behavior
                        echo "$usage"
                        echo "$behavior"
                        return 0
                        ;;
                    ?)
                        echo "Unable to recognize long $arg."
                        ;;
                    *)
                        echo "Unable to parse long argument"
						_echo_usage
                        echo "$usage"
                        return 1
                        ;;
                esac;;
            c)
                create=1;
                ;;
            d)
                delete=1;
                ;;
			e)
				echo=1;
				;;
            l)
                _list_bookmarks
                return 0
                ;;
            p)
                program="${!OPTIND}"
                OPTIND=$(( $OPTIND + 1 ))
                ;;
            r)
                argvalue="${!OPTIND}"
                OPTIND=$(( $OPTIND + 1 ))
                _set_bookmark_releases $argvalue
                return 0
                ;;
            h)
                echo "$usage"
                echo "$behavior"
                return 0
                ;;
            ?)
                echo "Unable to recognize short $arg."
                ;;
            *)
                echo "Unable to parse arguments"
                echo "$usage"
                return 1
                ;;
        esac
    done

    shift $(( OPTIND - 1 ))

    local bookmark=$1

    if [ "$bookmark" = "" ]; then
        echo "Error: no bookmark provided"
        return 1
    fi

	# map the bookmark to the destination on disk
    # we want to allow "apple/banana" to map to any of three possibilities:
    #   1. the bookmark "apple/banana"
    #   2. the bookmark "apple" with subdirectory "banana" at the destination
    #   3. the subdirectory "apple/banana" relative to the current location

    if [ "$delete" = "1" ]; then
        _delete_bookmark $bookmark
		have_taken_action=1
    fi

    if [ "$create" = "1" ]; then
        _create_bookmark $bookmark
		have_taken_action=1
    fi

	if [ "$delete" = "1" ] || [ "$create" = "1" ]; then
		_save_bookmarks
	fi

    # get the bookmark destination and use it
	if [ ! "$have_taken_action" = "1" ]; then

        local destination="error"
        if [ ${go_bookmarks["$bookmark"]} ]; then
            destination=${go_bookmarks["$bookmark"]}
        else
            local pattern="^([^/]*)/?(.*)$"
            [[ $bookmark =~ $regex ]]
            local top_level="${BASH_REMATCH[1]}"
            local sub_level="${BASH_REMATCH[2]}"
            if [ ${go_bookmarks["$top_level"]} ]; then
                destination="${go_bookmarks["$top_level"]}/$sub_level"
            else
                destination="$bookmark"
            fi
        fi

        if [ "$echo" = "1" ]; then
            echo "$destination"
        elif [[ "$program" ]]; then
			$program $destination
        else
			cd "$destination"
        fi
    fi
}

function _create_bookmark() {
    if [ ${go_bookmarks["$1"]} ]; then
        echo "Bookmark '$1' already exists and was not replaced";
    else
		go_bookmarks["$1"]="$(pwd)"
        # create directories for nested bookmark names
        # if [[ $bookmark =~ / ]]; then
        #    mkdir -p ~/.go_bookmarks/$(dirname $bookmark)
        #fi
        #echo "echo `pwd`" > ~/.go_bookmarks/"$bookmark";
        #chmod u+x ~/.go_bookmarks/"$bookmark";
        echo "Bookmark $1 created"
    fi
}

function _delete_bookmark() {
	unset go_bookmarks["$1"]
    # local bookmark=$1
    # remove recursively because we can have nested bookmarks
    # rm -r ~/.go_bookmarks/"$bookmark"
    echo "Bookmark $1 deleted"
}

function _list_bookmarks() {
	echo ${!go_bookmarks[@]}
}

function _save_bookmarks() {
	array_text="echo '( "
	for bookmark in "${!go_bookmarks[@]}"; do
		destination=${go_bookmarks["$bookmark"]}
		array_text=$array_text'["'$bookmark'"]="'$destination'"'" "
	done
	array_text=$array_text")'"

	echo -e $array_text > $DOTFILES/bash/go_bookmarks
}

function _echo_bookmark() {
	echo ${go_bookmarks["$1"]}
}
