snippet log "Console log"
console.log(\`${0}\`);
endsnippet

snippet logv "Console log a variable"
console.log('${1:name}', `!p snip.rv = t[1]`);
endsnippet

snippet logj "Console log a JSONified variable"
console.log('${1:name}', JSON.stringify(`!p snip.rv = t[1]`, null, 2));
endsnippet

snippet pbnode "PropType for a bnode"
bnode: React.PropTypes.shape({
	select: React.PropTypes.func,
}).isRequired,
endsnippet

snippet proptypes "Generic React.PropTypes definition"
${1:ClassName}.propTypes = {
	${0}
};
endsnippet

snippet dt "DataTypes"
DataTypes.
endsnippet

snippet component "A template for a file with a basic component"
import React, {Component, ReactElement} from "react";

interface `!p snip.rv = t[1]`Props {
}

interface `!p snip.rv = t[1]`State {
}

class ${1:ClassName} extends Component<`!p snip.rv = t[1]`Props, `!p snip.rv = t[1]`State> {
	render(): ReactElement<void> {
		return (
			${2:<div />}
		);
	}
}

export default `!p snip.rv = t[1]`;
endsnippet

snippet con "A constructor for a React component"
constructor(props) {
	super(props);
	${1}
}
endsnippet

snippet logall "Log all properties of the given object"
const logall = (obj) => { if (obj == null) { return; }; console.log(Object.getOwnPropertyNames(obj)); logall(Object.getPrototypeOf(obj)); };
logall(${1:obj});
endsnippet

snippet tbind "Bind 'this' to a function"
this.${1:function} = this.`!p snip.rv = t[1]`.bind(this);
endsnippet

snippet main "Main function of a script"
function main(): void {
	
}

if (require.main === module) {
	main();
}
endsnippet

snippet maincli "Main function of a script (with CLI)"
import cli from "commander";

function main(): void {
	
}

if (require.main === module) {
	cli
		.option("${0}")
		.parse(process.argv);
	main(cli);
}
endsnippet

snippet prop "React.PropTypes"
React.PropTypes.${0}
endsnippet

snippet desc "Describe test block"
describe('${1:text}', function(): void {
	${0}
});
endsnippet

snippet before "Before test block"
before(function(): void {
	${0}
});
endsnippet

snippet after "After test block"
after(function(): void {
	${0}
});
endsnippet

snippet afterreset "After test block to reset the database"
after(async function(): Promise<void> {
	await integrationSetup.resetDatabaseObjects(testData);
});
endsnippet

snippet reset "Reset database"
await integrationSetup.resetDatabaseObjects(testData);
endsnippet

snippet eit "Endpoint it test block"
it('${1:text}', async function(): Promise<void> {
	${0}
});
endsnippet

snippet its "It test block, synchronous"
it('${1:text}', function(): void {
	${0}
});
endsnippet

snippet integration "Template for an integration test"
import models from '@src/models';
import { DALMATIAN_ID } from '@src/test/data/dalmatian_testco';
import { getTestSuite } from '@src/test/data/test_data';
import assert from '@src/test/utils/assert';
import integrationSetup from '@src/test/utils/integration_setup';
import rollbackIt from '@src/test/utils/rollback_it';

describe('${1:file_name} tests:', function(): void {
	let testData = null;

	before(async function(): Promise<void> {
		testData = [getTestSuite('base'), getTestSuite('dalmatianTestCo')];
		await integrationSetup.resetDatabaseObjects(testData);
	});
});
endsnippet

snippet integrationdummy "Template for an integration test"
import models from '@src/models';
import { LEOPOLD_ID } from '@src/test/data/dummytestco';
import { getTestSuite } from '@src/test/data/test_data';
import assert from '@src/test/utils/assert';
import integrationSetup from '@src/test/utils/integration_setup';
import rollbackIt from '@src/test/utils/rollback_it';

describe('${1:file_name} tests:', function(): void {
	let testData = null;

	before(async function(): Promise<void> {
		testData = [getTestSuite('base'), getTestSuite('dummyTestCo')];
		await integrationSetup.resetDatabaseObjects(testData);
	});
});
endsnippet

snippet scol "Sequelize column definition"
`!p snip.rv = ''.join([t[1].split('_')[0]] + [s.title() for s in t[1].split('_')[1:]])`: {
	field: '${1:column_name}',
	type: Sequelize.${2:TYPE},
},
endsnippet

snippet faketimers "Use fake timers"
sinon.useFakeTimers({ now: new Date('2017-04-01'), toFake: ['Date'] });
endsnippet

snippet stateless "Stateless React component"
import React, { StatelessComponent } from 'react';

interface `!p snip.rv = t[1]`Props {
}

export const ${1:Name}: StatelessComponent<`!p snip.rv = t[1]`Props> = (props) => {
	return (
		${2:<div />}
	);
}

export default `!p snip.rv = t[1]`;
endsnippet

snippet models "Import models"
import models from '@src/models';
endsnippet

snippet tsd "tslint disable"
// tslint:disable-next-line:${0}
endsnippet

snippet esd "eslint disable"
// eslint-disable-next-line ${0}
endsnippet

snippet tsg "tslint global disable"
/*
tslint:disable:
${0}
TODO: Remove these exemptions and fix lint warnings/errors
*/
endsnippet

snippet sand "Create sinon sandbox"
const sandbox = sinon.createSandbox();
endsnippet

snippet aftersand  "Restore sandbox in after function"
after(function(): void {
	sandbox.restore();
});
endsnippet

snippet ai "Armor inputs"
armorInputs: [{ name: "${1:name}" }],
endsnippet

snippet wi "Weapon inputs"
weaponInputs: [{ name: "${1:name}" }],
endsnippet

snippet gt "Glossterm"
\\\\glossterm{${1:name}}
endsnippet

snippet at "Ability tag"
\\\\abilitytag{${1:name}}
endsnippet

snippet page "Create a page with puppeteer"
await runInBrowser(async (page: Page) => {
	${0}
});
endsnippet

snippet silly "Silly-level log"
rootLogger.silly('${0}');
endsnippet

snippet cli "Commander-style CLI object"
cli
	.version('0.0.1')
	.parse(process.argv);
endsnippet

snippet rl "Import root logger"
import { rootLogger } from '@src/util/log';
endsnippet

snippet gql "Import gql"
import gql from 'graphql-tag';
endsnippet

snippet gquery "Gql query"
export const ${1:name}Gql = gql\`
	query `!p snip.rv = t[1]` {
		${0}
	}
\`
endsnippet

snippet gmutation "Gql mutation"
export const ${1:name}Gql = gql\`
	mutation `!p snip.rv = t[1]` {
		${0}
	}
\`
endsnippet

snippet clientgen "GraphQL client gen"
import * as Graphql from '@src/graphql/client_gen';
endsnippet

snippet servergen "GraphQL server gen"
import * as Graphql from '@src/graphql/server_gen';
endsnippet

snippet gcomponent "Graphql component"
<Graphql.${1:Name}Component>
	{(${2:functionName}) => {
		return (
			${0}
		);
	}}
</Graphql.`!p snip.rv = t[1]`Component>
endsnippet

snippet linkcurrent "linkState with currentPerson default"
{...linkState(this, '${1:varName}', currentPerson.`!p snip.rv = t[1]`)}
endsnippet

snippet importlogger
import { ProviderLogger, rootLogger } from '@src/util/log';
endsnippet

snippet state
const [${1:varname}, set`!p snip.rv = (t[1][0].upper() + t[1][1:]) if t[1] else ''`] = useState<${2:vartype}>(${0});
endsnippet

snippet monster
{
	// Required
	alignment: REQUIRED,
	armorInputs: [{ name: REQUIRED }],
	knowledge: {
		0: \`
			TODO
		\`,
	},
	level: REQUIRED,
	name: ${1:REQUIRED},
	size: "medium",
	startingAttributes: { str: 0, dex: 0, con: 0, int: 0, per: 0, wil: 0 },
	weaponInput: [{ name: REQUIRED }],

	// Optional
	// attackInputs: [],
	// challengeRating: 1,
	// delayedCalculations: [],
	// description: "",
	// languages: ["Aboleth", "Aquan", "Undercommon"],
	// passiveAbilities: [],
	// skillPoints: {},
	// speeds: {},
},
endsnippet

snippet attackInput
{
	// crit: "",
	defense: REQUIRED,
	// hit: "",
	name: ${1:REQUIRED},
	// preface: "",
	// source: "magical",
	target: REQUIRED,
},
endsnippet

snippet cantrip
{
	name: '${1:name}',

	effect: \`
		${0}
	\`,
	scaling: {
		2: '',
		4: '',
		6: '',
	},
	type: '${2:type}',
},
endsnippet

snippet spell
{
	name: '${1:name}',

	// effect: '${0}',
	// narrative: '',
	rank: ${2:rank},
	scaling: {
		3: '',
		5: '',
		7: '',
	},
	type: '${3:type}',
},
endsnippet

snippet ritual
{
	name: '${1:name}',

	castingTime: '${4:castingTime}',
	// effect: '${0}',
	// narrative: '',
	rank: ${2:rank},
	type: '${3:type}',
},
endsnippet

snippet massspell
{
	name: "Mass `!p snip.rv = t[1]`",

	castingTime: 'minor action',
	functionsLike: {
		name: '${1:name}',
		mass: true,
	},
	// narrative: '',
	rank: ${2:rank},
	scaling: {
		5: '${0}',
		7: '',
	},
	type: 'Attune (target)',
},
endsnippet

snippet spellattack
attack: {
	// crit: '',
	// glance: '',
	hit: \`
		${2:Hit.}
	\`,
	targeting: \`
		${1:Target.}
	\`,
},
endsnippet

snippet curseattack
attack: {
	crit: 'The effect lasts until the curse is removed.',
	glance: 'The effect lasts until the end of the next round.',
	hit: \`
		${1:Hit.}
		This effect lasts until it takes a \\glossterm{short rest}.
	\`,
	targeting: \`
		Make an attack vs. Mental against one creature within \\\\medrange.
	\`,
},
endsnippet

snippet damageattack
attack: {
	glance: 'Half damage.',
	hit: \`
		The subject takes ${2:dice} + \\\\glossterm{power} ${3:type} damage.
	\`,
	targeting: \`
		Make an attack vs. ${1:Defense} against anything within \\\\medrange.
	\`,
},
endsnippet

snippet glanceend
glance: "The effect lasts until the end of the next round.",
endsnippet

snippet critcondition
crit: "The effect becomes a \\\\glossterm{condition} on each subject.",
endsnippet


snippet maneuver
{
	name: '${1:name}',

	effect: \`
		${0}
	\`,
	// narrative: '',
	rank: ${2:rank},
	type: '${3:Instant}',
},
endsnippet

snippet it
\\\\textit<${0}>
endsnippet

snippet d0
\\\\damagerankzero{${0}}
endsnippet

snippet d1
\\\\damagerankone{${0}}
endsnippet
snippet d1h
\\\\damagerankonehigh{${0}}
endsnippet
snippet d1l
\\\\damagerankonelow{${0}}
endsnippet

snippet d2
\\\\damageranktwo{${0}}
endsnippet
snippet d2h
\\\\damageranktwohigh{${0}}
endsnippet
snippet d2l
\\\\damageranktwolow{${0}}
endsnippet

snippet d3
\\\\damagerankthree{${0}}
endsnippet
snippet d3h
\\\\damagerankthreehigh{${0}}
endsnippet
snippet d3l
\\\\damagerankthreelow{${0}}
endsnippet

snippet d4
\\\\damagerankfour{${0}}
endsnippet
snippet d4h
\\\\damagerankfourhigh{${0}}
endsnippet
snippet d4l
\\\\damagerankfourlow{${0}}
endsnippet

snippet d5
\\\\damagerankfive{${0}}
endsnippet
snippet d5h
\\\\damagerankfivehigh{${0}}
endsnippet
snippet d5l
\\\\damagerankfivelow{${0}}
endsnippet

snippet d6
\\\\damageranksix{${0}}
endsnippet
snippet d6h
\\\\damageranksixhigh{${0}}
endsnippet
snippet d6l
\\\\damageranksixlow{${0}}
endsnippet

snippet d7
\\\\damagerankseven{${0}}
endsnippet
snippet d7h
\\\\damageranksevenhigh{${0}}
endsnippet
snippet d7l
\\\\damageranksevenlow{${0}}
endsnippet
