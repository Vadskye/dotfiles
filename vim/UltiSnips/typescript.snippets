snippet log "Console log"
console.log(\`${0}\`);
endsnippet

snippet logv "Console log a variable"
console.log('${1:name}', `!p snip.rv = t[1]`);
endsnippet

snippet logj "Console log a JSONified variable"
console.log('${1:name}', JSON.stringify(`!p snip.rv = t[1]`, null, 2));
endsnippet

snippet pbnode "PropType for a bnode"
bnode: React.PropTypes.shape({
	select: React.PropTypes.func,
}).isRequired,
endsnippet

snippet proptypes "Generic React.PropTypes definition"
${1:ClassName}.propTypes = {
	${0}
};
endsnippet

snippet dt "DataTypes"
DataTypes.
endsnippet

snippet component "A template for a file with a basic component"
import React, {Component, ReactElement} from "react";

interface `!p snip.rv = t[1]`Props {
}

interface `!p snip.rv = t[1]`State {
}

class ${1:ClassName} extends Component<`!p snip.rv = t[1]`Props, `!p snip.rv = t[1]`State> {
	render(): ReactElement<void> {
		return (
			${2:<div />}
		);
	}
}

export default `!p snip.rv = t[1]`;
endsnippet

snippet con "A constructor for a React component"
constructor(props) {
	super(props);
	${1}
}
endsnippet

snippet logall "Log all properties of the given object"
const logall = (obj) => { if (obj == null) { return; }; console.log(Object.getOwnPropertyNames(obj)); logall(Object.getPrototypeOf(obj)); };
logall(${1:obj});
endsnippet

snippet tbind "Bind 'this' to a function"
this.${1:function} = this.`!p snip.rv = t[1]`.bind(this);
endsnippet

snippet main "Main function of a script (async)"
import shutDownAfter from '@src/util/shut_down_after';

async function main(): Promise<void> {
	${0}
}

if (require.main === module) {
	// tslint:disable-next-line:no-floating-promises
	shutDownAfter(main());
}
endsnippet

snippet prop "React.PropTypes"
React.PropTypes.${0}
endsnippet

snippet desc "Describe test block"
describe('${1:text}', function(): void {
	${0}
});
endsnippet

snippet before "Before test block"
before(function(): void {
	${0}
});
endsnippet

snippet after "After test block"
after(function(): void {
	${0}
});
endsnippet

snippet afterreset "After test block to reset the database"
after(async function(): Promise<void> {
	await integrationSetup.resetDatabaseObjects(testData);
});
endsnippet

snippet reset "Reset database"
await integrationSetup.resetDatabaseObjects(testData);
endsnippet

snippet it "It test block"
rollbackIt('${1:text}', async function(): Promise<void> {
	${0}
});
endsnippet

snippet eit "Endpoint it test block"
it('${1:text}', async function(): Promise<void> {
	${0}
});
endsnippet

snippet its "It test block, synchronous"
it('${1:text}', function(): void {
	${0}
});
endsnippet

snippet integration "Template for an integration test"
import models from '@src/models';
import { DALMATIAN_ID } from '@src/test/data/dalmatian_testco';
import { getTestSuite } from '@src/test/data/test_data';
import assert from '@src/test/utils/assert';
import integrationSetup from '@src/test/utils/integration_setup';
import rollbackIt from '@src/test/utils/rollback_it';

describe('${1:file_name} tests:', function(): void {
	let testData = null;

	before(async function(): Promise<void> {
		testData = [getTestSuite('base'), getTestSuite('dalmatianTestCo')];
		await integrationSetup.resetDatabaseObjects(testData);
	});
});
endsnippet

snippet integrationdummy "Template for an integration test"
import models from '@src/models';
import { LEOPOLD_ID } from '@src/test/data/dummytestco';
import { getTestSuite } from '@src/test/data/test_data';
import assert from '@src/test/utils/assert';
import integrationSetup from '@src/test/utils/integration_setup';
import rollbackIt from '@src/test/utils/rollback_it';

describe('${1:file_name} tests:', function(): void {
	let testData = null;

	before(async function(): Promise<void> {
		testData = [getTestSuite('base'), getTestSuite('dummyTestCo')];
		await integrationSetup.resetDatabaseObjects(testData);
	});
});
endsnippet

snippet scol "Sequelize column definition"
`!p snip.rv = ''.join([t[1].split('_')[0]] + [s.title() for s in t[1].split('_')[1:]])`: {
	field: '${1:column_name}',
	type: Sequelize.${2:TYPE},
},
endsnippet

snippet faketimers "Use fake timers"
sinon.useFakeTimers({ now: new Date('2017-04-01'), toFake: ['Date'] });
endsnippet

snippet stateless "Stateless React component"
import React, { StatelessComponent } from 'react';

interface `!p snip.rv = t[1]`Props {
}

export const ${1:Name}: StatelessComponent<`!p snip.rv = t[1]`Props> = (props) => {
	return (
		${2:<div />}
	);
}

export default `!p snip.rv = t[1]`;
endsnippet

snippet models "Import models"
import models from '@src/models';
endsnippet

snippet tsd "tslint disable"
// tslint:disable-next-line:${0}
endsnippet

snippet esd "eslint disable"
// eslint-disable-next-line ${0}
endsnippet

snippet tsg "tslint global disable"
/*
tslint:disable:
${0}
TODO: Remove these exemptions and fix lint warnings/errors
*/
endsnippet

snippet sand "Create sinon sandbox"
const sandbox = sinon.createSandbox();
endsnippet

snippet aftersand  "Restore sandbox in after function"
after(function(): void {
	sandbox.restore();
});
endsnippet

snippet ai "Armor inputs"
armorInputs: [{ name: "${1:name}" }],
endsnippet

snippet wi "Weapon inputs"
weaponInputs: [{ name: "${1:name}" }],
endsnippet

snippet gt "Glossterm"
\\\\glossterm{${1:name}}
endsnippet

snippet page "Create a page with puppeteer"
await runInBrowser(async (page: Page) => {
	${0}
});
endsnippet

snippet silly "Silly-level log"
rootLogger.silly('${0}');
endsnippet

snippet cli "Commander-style CLI object"
cli
	.version('0.0.1')
	.parse(process.argv);
endsnippet

snippet rl "Import root logger"
import { rootLogger } from '@src/util/log';
endsnippet

snippet gql "Import gql"
import gql from 'graphql-tag';
endsnippet

snippet gquery "Gql query"
export const ${1:name}Gql = gql\`
	query `!p snip.rv = t[1]` {
		${0}
	}
\`
endsnippet

snippet gmutation "Gql mutation"
export const ${1:name}Gql = gql\`
	mutation `!p snip.rv = t[1]` {
		${0}
	}
\`
endsnippet

snippet clientgen "GraphQL client gen"
import * as Graphql from '@src/graphql/client_gen';
endsnippet

snippet servergen "GraphQL server gen"
import * as Graphql from '@src/graphql/server_gen';
endsnippet

snippet gcomponent "Graphql component"
<Graphql.${1:Name}Component>
	{(${2:functionName}) => {
		return (
			${0}
		);
	}}
</Graphql.`!p snip.rv = t[1]`Component>
endsnippet

snippet linkcurrent "linkState with currentPerson default"
{...linkState(this, '${1:varName}', currentPerson.`!p snip.rv = t[1]`)}
endsnippet

snippet importlogger
import { ProviderLogger, rootLogger } from '@src/util/log';
endsnippet

snippet state
const [${1:varname}, set`!p snip.rv = (t[1][0].upper() + t[1][1:]) if t[1] else ''`] = useState<${2:vartype}>(${0});
endsnippet
