snippet fdoc "create docstring template for a function"
"""${1:text}

Args:
	${2:name} (${3:type}): ${4:Explanation}

Yields:
	${5:type}: ${6:Explanation}
"""
endsnippet

snippet main "create boilerplate for a main() function"
#!/usr/bin/env python3


def main():
	${1:pass}


if __name__ == "__main__":
	main()
endsnippet

snippet nosetest "create boilerplate for a nose test"
from nose.tools import *
import ${1:test_module}

def setup():
	pass

def teardown():
	pass

def test_something():
	${2:pass}
endsnippet

snippet pdb "set a breakpoint with pdb"
import pdb; pdb.set_trace()
endsnippet

snippet init "Create an __init__ method"
def __init__(self, ${1:args}):
	pass
endsnippet

snippet s "Self-assign an argument"
self.${1:arg} = `!p snip.rv = t[1]`
endsnippet

snippet sc "Self-assign an argument that is self-continuing"
self.${1:arg} = `!p snip.rv = t[1]`
sc
endsnippet

snippet sub "Subspell"
Subspell('${1:name}', ${2:level}, """
	${3:description}
"""),
endsnippet

snippet spell "Base template for a spell"
spells.append(Spell(
	name="${1:name}",
	# header=Header("${2:description}"),
	targeting=Targeting(
		${3:targeting}
	),
	effects=Effects(
		effect="""
			${4:effects}
		""",
		tags=[${5:tags}],
	),
	schools=[${6:schools}],
	lists=[${7:lists}],
	cantrip="${8:cantripeffect}",
	subspells=[
		${10:aug}
	],
	category='${11:category}',
))
endsnippet

snippet ritual "Base template for a ritual"
rituals.append(Spell(
	name="${1:name}",
	base_level=${2:0},
	# header=Header("${3:description}"),
	targeting=Targeting(
		${4:targeting}
	),
	effects=Effects(
		effect="""
			${5:effects}
		""",
		tags=[${6:tags}],
	),
	schools=[${7:schools}],
	lists=[${8:lists}],
))
endsnippet

snippet app "base template for an apparel item"
apparel.append(MagicItem(
	name="${1:name}",
	level=${2:0},
	material_type='${3:type}',
	tags=[${4:tag}],
	description="""
		${5:effect}
	""",
	short_description="${6:description}",
))
endsnippet

snippet wep "base template for a weapon"
weapons.append(MagicItem(
	name="${1:name}",
	level=${2:0},
	material_type='weapon',
	tags=[${3:tag}],
	description="""
		${4:effect}
	""",
	short_description="${5:description}",
))
endsnippet

snippet imp "base template for an implement"
implements.append(MagicItem(
	name="${1:name}",
	level=${2:0},
	material_type='${3:type}',
	tags=[${4:tag}],
	description="""
		${5:effect}
	""",
	short_description="${6:description}",
))
endsnippet

snippet gt "Glossterm"
\\\\glossterm<${1:term}>
endsnippet

snippet mb "Monster Bold"
\\\\mb<${1:text}>
endsnippet

snippet it "Italics"
\\\\textit<${1:text}>
endsnippet

snippet cre "Creature generation block"
Creature(
	character_class=CharacterClass('${1:class}'),
	level=${2:level},
	name='${3:name}',
	natural_armor=${4:armor},
	race=Race('${5:race}'),
	size=Size('${6:medium}'),
	starting_attributes=[${7:attributes}],
	weapons=[Weapon('${8:weapon}')],
)
endsnippet

snippet mon "Monster generation block"
monsters.append(get_latex_from_creature(
	${1:creature_var},
	acts${0}
))
endsnippet

snippet acts "Active abilities"
active_abilities=[
	active_ability('${1:name}', f"""
		${0}
	"""),
],
endsnippet

snippet act "Active ability"
active_ability('${1:name}', f"""
	${0}
"""),
endsnippet

snippet p "Print a variable"
print('${1:name}', `!p snip.rv = t[1]`)
endsnippet

snippet pp "Pretty Print"
pprint(${0})
endsnippet

snippet ppp "Pretty Print a variable with its name"
print('${1:name}', end=" ")
pprint(`!p snip.rv = t[1]`)
endsnippet
