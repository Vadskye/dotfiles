snippet fdoc "create docstring template for a function"
"""${1:text}

Args:
	${2:name} (${3:type}): ${4:Explanation}

Yields:
	${5:type}: ${6:Explanation}
"""
endsnippet

snippet main "create boilerplate for a main() function"
#!/usr/bin/env python3


def main():
	${1:pass}


if __name__ == "__main__":
	main()
endsnippet

snippet nosetest "create boilerplate for a nose test"
from nose.tools import *
import ${1:test_module}

def setup():
	pass

def teardown():
	pass

def test_something():
	${2:pass}
endsnippet

snippet pdb "set a breakpoint with pdb"
import pdb; pdb.set_trace()
endsnippet

snippet init "Create an __init__ method"
def __init__(self, ${1:args}):
	pass
endsnippet

snippet s "Self-assign an argument"
self.${1:arg} = `!p snip.rv = t[1]`
endsnippet

snippet sc "Self-assign an argument that is self-continuing"
self.${1:arg} = `!p snip.rv = t[1]`
sc
endsnippet

snippet spell "Spell"
Spell('${1:name}', ${2:level}, '${3:target}', """
	${4:description}
""", tags=[${5:tag}]),
endsnippet

snippet sphere "Base template for a mystic sphere"
mystic_spheres.append(MysticSphere(
	name="${1:name}",
	# short_description="${2:description}",
	cantrip=Effects('${3:name}', """
		${4:effects}
	""", tags=[${5:tags}]),
	schools=[${6:schools}],
	lists=[${7:lists}],
	spells=[
		${8:spell}
	],
))
endsnippet

snippet ritual "Base template for a ritual"
Spell('${1:name}', ${2:level}, """
	${3:description}
"""),
endsnippet

snippet app "base template for an apparel item"
apparel.append(MagicItem(
	name="${1:name}",
	level=${2:0},
	material_type='${3:type}',
	tags=[${4:tag}],
	description="""
		${5:effect}
	""",
	short_description="${6:description}",
))
endsnippet

snippet wep "base template for a weapon"
weapons.append(MagicItem(
	name="${1:name}",
	level=${2:0},
	material_type='weapon',
	tags=[${3:tag}],
	description="""
		${4:effect}
	""",
	short_description="${5:description}",
))
endsnippet

snippet imp "base template for an implement"
implements.append(MagicItem(
	name="${1:name}",
	level=${2:0},
	material_type='${3:type}',
	tags=[${4:tag}],
	description="""
		${5:effect}
	""",
	short_description="${6:description}",
))
endsnippet

snippet gt "Glossterm"
\\\\glossterm<${1:term}>
endsnippet

snippet mb "Monster Bold"
\\\\mb<${1:text}>
endsnippet

snippet it "Italics"
\\\\textit<${1:text}>
endsnippet

snippet cre "Creature generation block"
Creature(
	character_class=CharacterClass('${1:class}'),
	level=${2:level},
	name='${3:name}',
	natural_armor=${4:armor},
	race=Race('${5:race}'),
	size=Size('${6:medium}'),
	starting_attributes=[${7:attributes}],
	weapons=[Weapon('${8:weapon}')],
)
endsnippet

snippet mon "Monster generation block"
monsters.append(get_latex_from_creature(
	${1:creature_var},
	acts${0}
))
endsnippet

snippet acts "Active abilities"
active_abilities=[
	active_ability('${1:name}', f"""
		${0}
	"""),
],
endsnippet

snippet act "Active ability"
active_ability('${1:name}', f"""
	${0}
"""),
endsnippet

snippet p "Print a variable"
print('${1:name}', `!p snip.rv = t[1]`)
endsnippet

snippet pp "Pretty Print"
pprint(${0})
endsnippet

snippet ppp "Pretty Print a variable with its name"
print('${1:name}', end=" ")
pprint(`!p snip.rv = t[1]`)
endsnippet

snippet sp "Spell shortcut"
\\\\spell<${1:name}>
endsnippet

snippet greater "Greater spell"
Spell('Greater `!p snip.rv = t[1].title()`', ${2:level}, '${3:targets}', """
	This spell functions like the \\\\spell<${1:name}> spell, except that ${4:stuff}
""", tags=[${5:tags}]),
endsnippet

snippet supreme "Supreme spell"
Spell('Supreme `!p snip.rv = t[1].title()`', ${2:level}, """
	This spell functions like the \\\\spell<${1:name}> spell, except that ${3:stuff}
""", tags=[${4:tags}]),
endsnippet

snippet man "Maneuver"
maneuvers.append(Maneuver(
	name='${1:name}',
	short_description='${2:short_description}',
	effect_text="""
		${3:effect}
	""",
	rank_upgrades={
		'3': '${4:rank}',
		'5': '${5:rank}',
		'7': '${6:rank}',
	},
	tags=[],
	lists=[${0}],
))
endsnippet

snippet hp "Hit point"
\\\\glossterm<hit point>
endsnippet

snippet hps "Hit points"
\\\\glossterm<hit points>
endsnippet

snippet rankline "Rank line for rank 1 spell"
\\\\rankline
\\\\rank<3> ${0}
\\\\rank<5> 
\\\\rank<7> 
endsnippet

snippet rankline2 "Rank line for rank 4 spells"
\\\\rankline
\\\\rank<6> ${0}
\\\\rank<8> 
endsnippet

snippet rankdmg "Rank line for damage"
\\\\rankline
\\\\rank<3> The damage increases to \\\\glossterm<standard damage> +1d.
\\\\rank<5> The damage increases to \\\\glossterm<standard damage> +2d.
\\\\rank<7> The damage increases to \\\\glossterm<standard damage> +3d.
endsnippet

snippet rankacc "Rank line for accuracy"
\\\\rankline
\\\\rank<3> The attack gains a +1 bonus to \\\\glossterm<accuracy>.
\\\\rank<5> The accuracy bonus increases to +2.
\\\\rank<7> The accuracy bonus increases to +3.
endsnippet

snippet cursecrit
\\\\crit As above, except that the effect lasts until the curse is removed.
endsnippet
