snippet fdoc "create docstring template for a function"
"""${1:text}

Args:
	${2:name} (${3:type}): ${4:Explanation}

Yields:
	${5:type}: ${6:Explanation}
"""
endsnippet

snippet main "create boilerplate for a main() function"
#!/usr/bin/env python

def main():
	pass
	${0}

if __name__ == "__main__":
	main()
endsnippet

snippet nosetest "create boilerplate for a nose test"
from nose.tools import *
import ${1:test_module}

def setup():
	pass

def teardown():
	pass

def test_something():
	${2:pass}
endsnippet

snippet pdb "set a breakpoint with pdb"
import pdb; pdb.set_trace()
endsnippet

snippet init "Create an __init__ method"
def __init__(self, ${1:args}):
	pass
endsnippet

snippet s "Self-assign an argument"
self.${1:arg} = `!p snip.rv = t[1]`
endsnippet

snippet sc "Self-assign an argument that is self-continuing"
self.${1:arg} = `!p snip.rv = t[1]`
sc
endsnippet

snippet aug "Spell augment"
Augment(
	level=${1:level},
	name="${2:name}",
	description="""
		${3:description}
	""",
),
endsnippet

snippet spell "Base template for a spell"
spells.append(Spell(
	name="${1:name}",
	header=Header("${2:description}"),
	targeting=Targeting(
		${3:targeting}
	),
	effects=Effects(
		${4:effects}
		tags=[${5:tags}],
	),
	schools=[${6:schools}],
	lists=[${7:lists}],
	cantrip="${8:cantripeffect}",
	custom_augments=[
		${10:aug}
	],
	category='${11:category}',
))
endsnippet
