" Settings:
    " abbreviations to correct typos
    iabbrev whenver whenever

" Functions:
    function! CamelCase() abort
        let underscoreIndex = match(getline('.'), '\v\C_[a-z]')
        
        while underscoreIndex != -1
            " go to underscoreIndex
            call cursor(line('.'), underscoreIndex + 1)
            " delete it and capitalize the next letter
            execute "normal! x~"

            let underscoreIndex = match(getline('.'), '\v\C_[a-z]')
        endwhile
    endfunction

    function! SnakeCase() abort
        let startingCapitalIndex = match(getline('.'), '\v\C<[A-Z][a-z]+[A-Z]')

        while startingCapitalIndex != -1
            " go to startingCapitalIndex
            call cursor(line('.'), startingCapitalIndex + 1)
            " uncapitalize it
            normal! ~

            let startingCapitalIndex = match(getline('.'), '\v\C<[A-Z][a-z]+[A-Z]')
        endwhile

        let capitalIndex = match(getline('.'), '\v\C[a-z]\zs[A-Z]')
        
        while capitalIndex != -1
            " go to capitalIndex
            call cursor(line('.'), capitalIndex + 1)
            " uncapitalize it and write an underscore before it
            execute "normal! ~\<Left>i_\<Esc>"

            let capitalIndex = match(getline('.'), '\v\C[a-z]\zs[A-Z]')
        endwhile
    endfunction

    function! SortLevel() abort
        let first_line = getline("'<")
        let last_line = getline("'>")
        let spaces = matchstr(first_line, '\v^( +)')
        silent! execute "'<,'>s%\\v\\n" . spaces . " +([^ ].*)\\_$(\\n" . spaces . "([^ ]))?%\\1 \\3%g"
        '<,'>!sort --ignore-case --dictionary-order
    endfunction

" Commands:
    " Line breaking commands
    command Nobreak setlocal wrap|setlocal textwidth=0|setlocal wrapmargin=0
    command Break setlocal nowrap|setlocal textwidth=80|setlocal wrapmargin=0

    command CamelCase call CamelCase()
    command SnakeCase call SnakeCase()

    command! -nargs=1 -range SortByColumn <line1>,<line2>!sort -k <args>

" Mappings:
    " more consistent Ctrl-R
    nnoremap <C-r> i<C-r>

    " quickly insert text from default register
    " inoremap <C-r><C-r> <C-r>"
    " nnoremap <C-r><C-r> i<C-r>"<Esc>
    " cnoremap <C-r><C-r> <C-r>"

    " use a as prefix for inner ("a") text objects instead of i
    onoremap aw iw
    onoremap aW iW
    onoremap as is
    onoremap ap ip
    onoremap a[ i[
    onoremap a] i]
    onoremap a( i(
    onoremap a) i)
    onoremap ab ib
    onoremap aB iB
    onoremap a< i<
    onoremap a> i>
    onoremap at it
    onoremap a{ i{
    onoremap a} i}
    onoremap a" i"
    onoremap a' i'
    onoremap a` i`

    " use s as prefix for outer ("surrounding") text objects instead of a
    onoremap sw aw
    onoremap sW aW
    onoremap ss as
    onoremap sp ap
    onoremap s[ a[
    onoremap s] a]
    onoremap s( a(
    onoremap s) a)
    onoremap sb ab
    onoremap sB aB
    onoremap s< a<
    onoremap s> a>
    onoremap st at
    onoremap s{ a{
    onoremap s} a}
    onoremap s" a"
    onoremap s' a'
    onoremap s` a`
    onoremap si ai
    onoremap sI aI

    " Sort the current selection
    vnoremap gs :'<,'>!sort<CR>

    " Sort the current indentation level, creactively smashing indented objects
    " This works best on code that can be automatically parsed back out, such as
    " with Prettier.
    nmap gl Vii<Esc>:call SortLevel()<CR>
    vnoremap gl <Esc>:call SortLevel()<CR>

    " Split lines
    nnoremap <Leader>' "zd$o<C-r>z<Esc>
    nnoremap <Leader>" "zd$O<C-r>z<Esc>

    nnoremap <BS> x<Left>

    " Fix <CR> completion inconsistency
    inoremap <expr> <CR> pumvisible() ? "\<C-Y>\<CR>" : "\<CR>"

    " Diff mappings
    nnoremap yp :diffput<CR><C-w><C-w>:write<CR><C-w><C-w>
    nnoremap yg :diffget<CR><C-w><C-w>:write<CR><C-w><C-w>
