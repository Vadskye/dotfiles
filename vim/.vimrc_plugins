" Ack:
    if executable('ag')
        let g:ackprg = 'ag --vimgrep --hidden'
    endif
    nnoremap ;s :Ack! ''<Left>
    nnoremap ;S "zyiw:Ack! '\b<C-R>z\b'<CR>
    nnoremap ;g :Ack! '' %:p:h<Left><Left><Left><Left><Left><Left><Left>
    nnoremap ;G :Ack! --depth=0 '' %:p:h<Left><Left><Left><Left><Left><Left><Left>

" ALE:
    let g:ale_lint_on_text_changed = 1
    let g:ale_lint_delay = 1000
    let g:ale_lint_on_enter = 1
    let g:ale_lint_on_save = 0
    let g:ale_javascript_eslint_use_global = 0
    let g:ale_javascript_eslint_options = '--cache'
    let g:ale_linters = {
        \ 'go': ['gosimple'],
        \ 'javascript': ['eslint', 'tsserver'],
        \ 'tex': ['chktex', 'proselint'],
        \ 'typescript': ['tsserver'],
    \ }
    let g:ale_maximum_file_size = 100000
    let g:ale_go_gometalinter_options='--disable-all --enable=errcheck'
    let g:ale_linters_ignore = {'typescript': ['eslint', 'tslint']}
    " the interfacer linter is very cool, but not worth the effort right now
    " gosimple is cool, but too slow
    " staticcheck is too slow

    nnoremap gd :ALEGoToDefinition<CR>

    let g:ale_fixers = {}
    let g:ale_fixers['go'] = ['gofmt']
    let g:ale_fixers['javascript'] = ['importjs', 'prettier']
    let g:ale_fixers['typescript'] = ['prettier', 'tslint']
    " This should be enabled only for particular directories
    let g:ale_fix_on_save = 0
    nnoremap ;p :ALEFix<CR>

" Airline:
    let g:airline_theme="jam"
    let g:airline#extensions#branch#enabled=0
    let g:airline#extensions#disable_rtp_load = 1
    let g:airline_highlighting_cache = 1

    " don't use separator symbols
    let g:airline_left_sep=''
    let g:airline_right_sep=''

    " skip detection for speed
    let g:airline_detect_crypt = 0
    let g:airline_detect_modified = 0
    let g:airline_detect_paste = 0
    let g:airline_detect_spell = 0

    " don't collapse, since we use different sections
    let g:airline_inactive_collapse = 0

    " load specific third party extensions rather than all of them
    let g:airline_extensions = ['ale', 'tabline']

    if get(g:, 'eclim_loaded')
        call add(g:airline_extensions, 'eclim')
    endif

    " since we handle modified manually, don't autodetect it
    " let g:airline_detect_modified=0

    function! AirlineInit()
        " don't show column information
        let g:airline_section_x = '%4l'
        let g:airline_section_y = ''
        let g:airline_section_z = ''
    endfunction
    autocmd User AirlineAfterInit call AirlineInit()

    " Enable tabline
      let g:airline#extensions#tabline#enabled = 1

    " Relative buffer navigation
    nnoremap <M-u> :bprevious<CR>
    nnoremap <M-o> :bnext<CR>

" Checkpoint:
    let g:checkpoint_directory = $DOTFILES . '/vim/checkpoints'

" Commentary:
    autocmd FileType jproperties setlocal commentstring=#\ %s

" CSV:
    hi link CSVColumnHeaderOdd Question
    hi link CSVColumnOdd Question
    hi link CSVColumnHeaderEven Identifier
    hi link CSVColumnEven Identifier
    hi link CSVDelimiter Number
    let g:csv_start = 1
    let g:csv_end = 100
    let g:csv_no_conceal=1
    for key in ['w', 'l', 'e', 'h', 'k', 'up', 'j', 'down', 'space']
        execute "let g:csv_nomap_" . key . " = 1"
    endfor

" DBExt:
    " let g:dbext_default_usermaps = 0
    " let g:dbext_default_DBI_max_rows = 100
    " let g:dbext_strip_terminator = 1
    " let g:dbext_default_prompt_for_parameters = 0
    " nmap <silent> <Leader>sp vip<Plug>DBExecVisualSQL
    " nmap <silent> <Leader>sdt <Plug>DBDescribeTable

" Deoplete:
if get(g:, 'loaded_deoplete', 1)
    let g:deoplete#enable_at_startup = 1

    " Use S-Enter to force completion
    " inoremap <expr><S-Enter> neocomplete#start_manual_complete()

    let g:deoplete#enable_smart_case = 1

    call deoplete#custom#option({
        \ 'auto_complete_delay': 50,
        \ 'smart_case': v:true,
    \ })

endif

" easy-align:
    nmap ga <Plug>(EasyAlign)v
    nmap <Leader>= <Plug>(EasyAlign)v
    nmap + <Plug>(EasyAlign)v
    " align latex tables
    nmap gat <Plug>(EasyAlign)vK*&

" Eclim:
    let g:EclimCompletionMethod = 'omnifunc'
    let g:EclimFileTypeValidate = 0
    let g:EclimMavenPomClasspathUpdate = 1
    let g:EclimProjectRefreshFiles = 1
    let g:EclimKeepLocalHistory = 0
    let g:EclimProjectTreeAutoOpen = 0

" Enchanted:
    " make sure vim is always very magic
    let g:VeryMagic=0
    let g:VeryMagicSubstitute=1
    let g:VeryMagicGlobal=0
    let g:VeryMagicVimGrep=1
    let g:VeryMagicSearchArg=1
    let g:VeryMagicFunction=1
    let g:VeryMagicHelpgrep=1
    let g:VeryMagicRange=1

" Fastfold:
    " don't pause on [] commands
      let g:fastfold_fold_movement_commands = []

" Filesight:
if get(g:, 'loaded_filesight')
    " let g:filesight_file_types = ['html', 'vim', 'perl', 'python', 'tex', 'java']
    let g:filesight_ctags_extra_args = ['--tex-kinds=-l']
    if has('unix')
        let g:filesight_ctags_bin = '/usr/bin/ctags'
    else
        let g:filesight_ctags_bin = expand("$USERPROFILE") . "/Utilities/ctags58/ctags.exe"
    endif

    let g:filesight_window_size = 30
    let g:filesight_run_on_startup = 0
    " let g:filesight_highlight_current_tag = "SpellRare"
    " let g:filesight_ctags_extra_args =
    "     \ '--regex-tex=//\\1/f,feat/e'
    let g:filesight_sort_tags = 'line'
    let g:filesight_use_conceal = 1
    let g:filesight_update_on_enter = 1
    let g:filesight_update_on_save = 1

    let g:filesight_log_file_ctags = expand('$HOME/filesight_ctags.log')
    let g:filesight_log_file_debug = expand('$HOME/filesight_debug.log')

    let g:filesight_custom_tags = {
        \ 'perl': [
            \ {
                \ 'highlight': 'PreProc',
                \ 'name': 'pragma',
                \ 'short_name': 'G',
                \ 'position_after': 'package',
                \ 'tag_pattern': '^use ([a-z][a-zA-Z_:]+)',
                \ 'tag_output': '\\1',
            \ },
            \ {
                \ 'highlight': 'PreProc',
                \ 'name': 'import',
                \ 'position_after': 'pragma',
                \ 'tag_pattern': '^use ([A-Z][a-zA-Z_:]+)',
                \ 'tag_output': '\\1',
            \ },
        \ ],
        \ 'tex': [
            \ {
                \ 'highlight': 'Identifier',
                \ 'in_statusline': 0,
                \ 'name': 'table',
                \ 'short_name': 'T',
                \ 'tag_pattern': '^ +\\\\lcaption[{]([^}]+)[}]',
                \ 'tag_output' : '\\1',
            \ },
        \ ],
    \ }
endif

" Fugitive:
    " commit changes to the current file
    command Gadd Gwrite
    command! -nargs=1 GC silent! Git add "%" | execute "!git commit -m " . shellescape('<args>')

    let g:fugitive_no_maps = 1

    " open git status the same way we open NerdTree
    " use 'u' for 'statUs'
    nnoremap ;u :Gstatus<CR>

" FZF:
    " https://github.com/junegunn/fzf.vim/issues/47
    function! s:find_git_root()
      return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
    endfunction

    command! ProjectFiles execute 'Files' s:find_git_root()

    nnoremap ;f :ProjectFiles<CR>

" Go:
    let g:go_fmt_autosave = 0
    let g:go_dispatch_enabled = 1
    let g:go_textobj_enabled = 0
    let g:go_doc_keywordprg_enabled = 0

" ImportJS:
    nnoremap yi :ImportJSWord<CR>

" Indent Object:
    let g:indent_object_no_mappings=1
    omap ai <Plug>IndentObject-ii
    omap aI <Plug>IndentObject-ii
    omap si <Plug>IndentObject-aI
    omap sI <Plug>IndentObject-ai

" Javascript:
    let javascript_enable_domhtmlcss = 1
    let javascript_fold = 0
    let g:javascript_plugin_jsdoc = 1

" MatchTagAlways:
    let g:mta_filetypes = {
        \ 'html'  : 1,
        \ 'jsp'   : 1,
        \ 'xhtml' : 1,
        \ 'xml'   : 1,
        \ 'jinja' : 1,
    \ }

" Marvim:
    let marvim_store = $HOME . '/vimfiles/bundle/marvim/macros'
    let marvim_find_key = '<Leader>qf' " change find key from <F2> to 'space'
    let marvim_store_key = '<Leader>qs'     " change store key from <F3> to 'ms'
    let marvim_register = 'j'       " change used register from 'q' to 'c'
    " let marvim_prefix = 0           " disable default syntax based prefix

" Meta:
    let g:meta_directory = $DOTFILES . '/vim/meta'

" MRU:
    nnoremap ;h :MRU<Enter>

" Neocomplete:
if get(g:, 'loaded_neocomplete', 0)

    highlight Pmenu ctermbg=black ctermfg=darkgreen
    highlight PmenuSel ctermbg=darkgray ctermfg=black

    " use Tab for completion
    " inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<Tab>"
    " use BS to close the popup
    " inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    " Use S-Enter to force completion
    inoremap <expr><S-Enter> neocomplete#start_manual_complete()
    " Enter should always start a new line
    " This seems dumb; can this be changed elsewhere?
    " inoremap <expr><CR> pumvisible()? "\<CR>\<CR>" : "\<CR>"
    " ignore tex files
    let g:neocomplete#ignore_source_files = ['.tex']

    " use neocomplete at startup
    let g:acp_enableAtStartup = 0
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#enable_smart_case = 1
endif

" NERDTree:
    " don't automatically quit after opening a file
    let NERDTreeQuitOnOpen=0
    " disable 'press ? for help' text
    let NERDTreeMinimalUI=1
    " avoid confirmation for file manipulation
    let NERDTreeAutoDeleteBuffer=1
    " navigate directories easily
    let NERDTreeMapActivateNode="<CR>"
    let NERDTreeMapOpenRecursively="<S-CR>"
    let NERDTreeMapUpdirKeepOpen="j"
    let NERDTreeMapChangeRoot="l"
    let NERDTreeMapCloseDir="<Left>"
    let NERDTreeMapOpenRecursively="<Right>"
    " prevent remapping ik
    let NERDTreeMapOpenSplit="~"
    let NERDTreeMapJumpFirstChild="~~"
    let NERDTreeMapToggleHidden="H"

    let NERDTreeIgnore = ['\~$', '__pycache__', '__init__.py', 'node_modules']
    " add the current file as a bookmark in NERDTree
    function! NTBookmark(bookmark_name, bookmark_type) abort
        if a:bookmark_type ==# "file"
            NERDTreeFind
        elseif a:bookmark_type ==# "dir"
            NERDTree
        else
            echoerr "Unable to recognize bookmark type '" + a:bookmark_type + "'"
        endif
        try
            execute "Bookmark " . a:bookmark_name
            NERDTreeClose
        catch /\VUndefined variable: nerdtree/
            NERDTreeClose
            redraw
            echomsg "A bookmark named '" . a:bookmark_name . "' already exists"
        endtry
    endfunction
    command! -nargs=1 NTBookmarkFile call NTBookmark(<f-args>, "file")
    command! -nargs=1 NTBookmarkDir call NTBookmark(<f-args>, "dir")

    " go to the given bookmark
    function! NTGoToBookmark(bookmark_name, bookmark_type) abort
        if a:bookmark_type ==# "file"
            NERDTree
            execute "OpenBookmark " . a:bookmark_name
            NERDTreeClose
        elseif a:bookmark_type ==# "dir"
            execute "NERDTreeFromBookmark " . a:bookmark_type
        else
            echoerr "Unable to recognize bookmark type '" + a:bookmark_type + "'"
        endif
    endfunction
    command! -nargs=1 NTGoToBookmarkFile call NTGoToBookmark(<f-args>, "file")

    " bookmark mappings
    nnoremap ;b :NERDTreeFromBookmark 
    nnoremap ;B :NTGoToBookmarkFile 

    " run a command in the current directory
    function! NTRun(command) abort
        let close_tree = 0
        if ! exists("b:NERDTree")
            NERDTree
            let close_tree = 1
        endif

        let path = b:NERDTree['root']['path']['str']()
        if &shellslash && has('win32')
            let path = substitute(path, '\', '\\', 'g')
        endif
        execute "! cd " . shellescape(path) . " && " . a:command
        if close_tree == 1
            NERDTreeClose
        endif
    endfunction
    command! -nargs=1 NTRun call NTRun(<f-args>)

    autocmd Filetype nerdtree nmap <buffer> ! :NTRun 

" Repeat:
    " prevent mapping 'u'
    nmap :~~~~u <Plug>(RepeatUndo)
    nmap :~~~~U <Plug>(RepeatUndoLine)
    nmap :~~~~R <Plug>(RepeatRedo)

" Supertab:
    " let g:SuperTabDefaultCompletionType = "<c-x><c-u>"
    let g:SuperTabDefaultCompletionType = "context"
    " flip tab order
    let g:SuperTabMappingForward = '<s-tab>'
    let g:SuperTabMappingBackward = '<tab>'

" Surround:
    " mappings for vim surround
    let g:surround_no_mappings=1
    " delete
    nmap dh <Plug>Dsurround
    " create
    nmap ch <Plug>Ysurround
    " replace
    nmap rh <Plug>Csurround
    " delete
    " nmap ds <Plug>Dsurround
    " replace
    " nmap rs <Plug>Csurround
    " add surrounding
    " nmap <Leader>s <Plug>Ysurround
    " nmap <Leader>S <Plug>YSurround
    " nmap <Leader>ss <Plug>Yssurround
    " nmap <Leader>Ss <Plug>YSsurround
    " nmap <Leader>SS <Plug>YSSurround

" Tagbar:
    let g:tagbar_ctags_bin = "/home/kevin/programs/ctags/bin/ctags"

    function! TagbarDo()
        if &ft == 'tagbar'
            TagbarClose
        else
            TagbarOpen
        endif
        let window_number = bufwinnr('__Tagbar__.1')
        execute window_number . " wincmd w"
    endfunction
    command TagbarDo call TagbarDo()
    nnoremap ;a :TagbarDo<CR>

    let g:tagbar_compact = 1
    let g:tagbar_indent = 1
    let g:tagbar_show_visibility = 0
    let g:tagbar_width=30

    let g:tagbar_type_typescript = {
      \ 'ctagstype': 'typescript',
      \ 'kinds': [
        \ 'c:classes',
        \ 'n:modules',
        \ 'f:functions',
        \ 'v:variables',
        \ 'v:varlambdas',
        \ 'm:members',
        \ 'i:interfaces',
        \ 'e:enums',
      \ ]
    \ }

" Perl Support:
    " tell perl-support not to override ctrl-j mapping
    let g:Perl_Ctrl_j='off'
    let g:Perl_LocaltemplateFile = $DOTFILES . "/vim/perl-support/templates/Templates"

" Pydiction:
    let g:pydiction_location = 'C:/Program Files/Vim/vimfiles/ftplugin/pydiction/complete-dict'
    let g:pydiction_menu_height = 10

" Sneak:
    map f <Plug>Sneak_s
    map F <Plug>Sneak_S
    nmap t v<Plug>Sneak_s
    nmap T v<Plug>Sneak_S
    map m <Plug>Sneak_;
    map M <Plug>Sneak_,
    let g:sneak#s_next = 0
    let g:sneak#use_ic_scs = 1
    let g:sneak#label = 1
    let g:sneak#target_labels = '1234567890!@#$%^&*()'

    " bold black text looks weirdly gray
    autocmd ColorScheme * hi Sneak ctermbg=12 ctermfg=black cterm=NONE gui=NONE
    autocmd ColorScheme * hi SneakFocus ctermbg=12 ctermfg=black cterm=NONE gui=NONE
    autocmd ColorScheme * hi SneakLabel ctermbg=12 ctermfg=black cterm=NONE gui=NONE

" Tsuquyomi:
    let g:tsuquyomi_disable_quickfix = 1

" Ultisnips:
    let g:UltiSnipsSnippetsDir = $DOTFILES . '/vim/UltiSnips'
    " manually specify snippet directory for speed
    let g:UltiSnipsSnippetDirectories=[$DOTFILES . '/vim/UltiSnips']

" Vim Latex:
    let g:tex_flavor='latex'
    " grep will sometimes skip displaying the file name if you
    " search in a singe file. This will confuse Latex-Suite. Set your grep
    " program to always generate a file-name.
    set grepprg=grep\ -nH\ $*
    " Starting with Vim 7, the filetype of empty .tex files defaults to
    " 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
    " The following changes the default filetype back to 'tex':
    let g:tex_flavor='latex'
    " remove markers in vim latex
    let g:Imap_UsePlaceHolders = 0
    let g:Tex_DefaultTargetFormat = 'pdf'
    " prevent interference with c-j by mapping it to something
    " that shouldn't interfere
    map :~~~~ <Plug>IMAP_JumpForward
    imap :~~~~ <Plug>IMAP_JumpForward
    let g:Tex_Folding = 0
    " Disable concealing to play more nicely with vim-sneak and similar effects
    let g:tex_conceal = ""
    " Disable mapping F7
    let g:Tex_PromptedCommands = ""


" UltiSnips:
    " better key bindings for UltiSnipsExpandTrigger
    if has('unix')
        " hack to get around inability to detect shift-enter
        let g:UltiSnipsExpandTrigger = "<Linefeed>"
        let g:UltiSnipsJumpForwardTrigger = "<Linefeed>"
        let g:UltiSnipsJumpBackwardTrigger = "<C-Enter>"
    else
        let g:UltiSnipsExpandTrigger = "<S-Enter>"
        let g:UltiSnipsJumpForwardTrigger = "<S-Enter>"
        let g:UltiSnipsJumpBackwardTrigger = "<C-Enter>"
    endif
