" Settings:
    if has('nvim')
        tnoremap <Esc> <C-\><C-n>
        nnoremap ;m :vnew \| call termopen('fish') \| startinsert<CR>
        nnoremap ;M :new \| call termopen('fish') \| startinsert<CR>

        nnoremap <Leader>e a<C-u>pwd \| xclip -selection clipboard<CR><C-\><C-n>:e <C-r>+<CR>
    endif

" Functions:

    function! CreateOutputBuffer()
        execute "botright new | setlocal buftype=nofile bufhidden=hide noswapfile"
        execute "silent! file output"
        " execute "resize +10"
    endfunction

    function! OpenOutputBuffer()
        if ! SwitchToNamedBuffer("output")
            call CreateOutputBuffer()
        endif
    endfunction

    function! OpenTermoutBuffer()
        if ! SwitchToNamedBuffer("termout.log")
            top new
            edit termout.log
        endif
    endfunction

    " return 1 if successful, 0 if unsuccessful
    function! SwitchToNamedBuffer(name)
        if bufexists(a:name)
            let window_number = bufwinnr(a:name)
            execute window_number . " wincmd w"
            " if we failed to switch to it, it is probably inactive, so activate it
            if ! bufwinnr('') == window_number
                top new
                execute "buffer " . a:name
            endif
            return bufwinnr('') == window_number
        else
            return 0
        endif
    endfunction

" Mappings:
    " nnoremap <silent> <Leader>p ^"xy$:python terminal_thread = TerminalThread('<C-r>x')<CR>
    " we're actually mapping control-enter, but it's registered as C-J
    " nnoremap <silent> <Leader>x ^"xy$:python run_terminal_command('<C-r>x')<CR>
    " nnoremap <silent> <Leader>X ^"xy$:python run_terminal_command('<C-r>x', clear_buffer = True)<CR>
    " inoremap <silent> <C-J> <Esc>^"xy$:python run_terminal_command('<C-r>x')<CR>$a

function LoadTerminalPython()
    python << EOPYTHON
import platform
import subprocess
import threading
import time
import vim

class TerminalThread(object):
    def __init__(self, command):
        vim.command('call OpenTermoutBuffer()')
        self.terminal_buffer_index = vim.current.buffer.number
        # switch back to the original buffer
        vim.command('wincmd w')
        self.command = command
        thread = threading.Thread(target = self.run, args = ())
        thread.daemon = True
        self.is_done = False
        thread.start()

    def run(self):
        output_lines_to_buffer(self.command, self.terminal_buffer_index)
        self.is_done = True
        print "Terminal command complete"

def output_lines_to_buffer(cmd, buffer_number = None):
    if buffer_number is None:
        buffer_number = vim.current.buffer.number
    # Append the given shell command's output linewise to the current buffer.
    
    current_system = platform.system()
    if current_system == 'Linux':
        p = subprocess.Popen(['/bin/bash', '-i', '-c', cmd], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    elif current_system == 'Windows':
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)
    else:
        raise Exception("Unsupported system {0}".format(current_system))
    for line in iter(p.stdout.readline, ''):
        vim.buffers[buffer_number].append(line.rstrip())
        # automatically keep up with the bottom
        vim.command('wincmd w')
        vim.command('normal! G')
        vim.command('wincmd w')
        vim.command('redraw')
        time.sleep(0.1)

def output_lines_to_current_buffer(cmd, clear_buffer = False):
    if clear_buffer:
        vim.command('normal! ggdG')
    vim.current.buffer.append('Executing "%s": {{{' % cmd)

    try:
        p = subprocess.Popen(['bash', '-c', cmd], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    except WindowsError:
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)

    vim.command('redraw')
    last_redraw_time = time.time()
    for line in iter(p.stdout.readline, ''):
        vim.current.buffer.append('| ' + line.rstrip())
        # automatically keep up with the bottom
        if time.time() - last_redraw_time > 0.1:
            vim.command('normal! G')
            vim.command('redraw')
            last_redraw_time = time.time()
    vim.current.buffer.append('}}}')
    vim.current.buffer.append('')
    vim.command('normal! G')
    vim.command('redraw')

def run_terminal_command(cmd, clear_buffer = False):
    vim.command('echomsg "Executing command"')
    vim.command('call OpenTerminalBuffer()')
    output_lines_to_current_buffer(cmd, clear_buffer)
    vim.command('wincmd w')
    vim.command('echomsg "Execution complete"')

def cmd_derp(cmd):
    termout = open('termout.log', 'a')
    vim.command('call OpenTermoutBuffer()')
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)
    for line in iter(p.stdout.readline, ''):
        termout.write(line)
        vim.command('checktime')

EOPYTHON
endfunction
