" Settings:
    let s:letter_pattern = '[a-zA-Z_0-9]'
    let s:start_of_word_pattern = s:letter_pattern . '@<!' . s:letter_pattern
    let s:end_of_word_pattern = s:letter_pattern . s:letter_pattern . '@!'

" Functions:
    " Jump to the next or previous line that has the same level or a lower
    " level of indentation than the current line.
    "
    " fwd (bool): true: Go to next line
    " false: Go to previous line
    " lowerlevel (bool): true: Go to line with lower indentation level
    " false: Go to line with the same indentation level
    " skipblanks (bool): true: Skip blank lines
    " false: Don't skip blank lines
    function! NextIndent(fwd, lowerlevel, skipblanks)
        let motion_count = v:count1

        " set the context before the jump so the motion can be navigated with
        " context markers
        normal! m`

        let i = 0
        while i < motion_count
            let line = line('.')
            let column = col('.')
            let lastline = line('$')
            let indent = indent(line)
            let stepvalue = a:fwd ? 1 : -1
            while (line > 0 && line <= lastline)
                let line = line + stepvalue
                if ( ! a:lowerlevel && indent(line) == indent ||
                            \ a:lowerlevel && indent(line) < indent)
                    if (! a:skipblanks || strlen(getline(line)) > 0)
                        call cursor(line, column)
                        break
                    endif
                endif
            endwhile
            let i = i + 1
        endwhile
    endfunction

    function Search_count(pattern, flags)
        let i = 0
        while i < v:count1
            call search(a:pattern, a:flags)
            let i = i + 1
        endwhile
    endfunction

" Commands:
    command! -count=1 GoToWordStart call Search_count('\v' . s:start_of_word_pattern, 'W')
    command! -count=1 GoToWordStartBackwards call Search_count('\v' . s:start_of_word_pattern, 'bW')
    command! -count=1 GoToWordEnd call Search_count('\v' . s:end_of_word_pattern, 'W')
    command! -count=1 GoToWordEndBackwards call Search_count('\v' . s:end_of_word_pattern, 'bW')

" Mappings:
    " Use arrow keys properly in wrapped lines
    inoremap <silent> <Down> <C-o>gj
    inoremap <silent> <Up> <C-o>gk
    inoremap <silent> <End> <C-o>g<End>
    " vnoremap <silent> <Down> <C-o>gj
    vnoremap <silent> <Down> j
    vnoremap <silent> <Left> h
    vnoremap <silent> <Up> k
    vnoremap <silent> <Right> l
    " vnoremap <silent> <Up> <C-o>gk
    " vnoremap <silent> <End> <C-o>g<End>
    nnoremap <silent> <Down> gj
    nnoremap <silent> <Up> gk
    nnoremap <silent> <End> g<End>

    " Use 'soft' home (doesn't work well with multiline stuff)
    " Potentially enable only for "coding" files?
    " Or disable only for .txt and similar files?
    inoremap <silent> <home> <C-o>_
    vnoremap <silent> <home> <C-o>_
    noremap <silent> <home> _
    noremap <silent> _ g<home>

    " Grab sentences quickly
    nnoremap d. df.
    nnoremap c. yf.
    nnoremap r. cf.

    " keep screen centered
    noremap <PageDown> <C-d>zz
    noremap <PageUp> <C-u>zz
    inoremap <PageDown> <Esc><C-d>zzi
    inoremap <PageUp> <Esc><C-u>zzi

    " map directional word jumps so end-of-word motions are uppercase
    noremap j B
    noremap J gE
    onoremap J vgE
    noremap l W
    noremap L E
    " nnoremap E E
    " onoremap E e
    call MultiMap({
        \ 'map_keys': 'u',
        \ 'command': 'GoToWordStartBackwards',
        \ 'map_args': '<silent>',
    \ })
    call MultiMap({
        \ 'map_keys': 'U',
        \ 'command': 'GoToWordEndBackwards',
        \ 'map_args': '<silent>',
        \ 'operator_prefix': 'v',
    \ })
    call MultiMap({
        \ 'map_keys': 'o',
        \ 'command': 'GoToWordStart',
        \ 'map_args': '<silent>',
    \ })
    call MultiMap({
        \ 'map_keys': 'O',
        \ 'command': 'GoToWordEnd',
        \ 'map_args': '<silent>',
        \ 'operator_prefix': 'v',
    \ })

    " rapid back/forth navigation: C-u to go back, C-o to go forward
    noremap <C-u> <C-o>
    inoremap <C-u> <C-o><C-o>
    noremap <C-o> <C-i>
    inoremap <C-o> <C-o><C-i>

    " Moving back and forth between lines of same or lower indentation.
    " http://vim.wikia.com/wiki/Move_to_next/previous_line_with_same_indentation
    call MultiMap({
        \ 'map_keys': 'i',
        \ 'command': 'call NextIndent(0, 0, 1)',
        \ 'map_args': '<silent>',
        \ 'operator_prefix': 'V'
    \ })
    call MultiMap({
        \ 'map_keys': 'k',
        \ 'command': 'call NextIndent(1, 0, 1)',
        \ 'map_args': '<silent>',
        \ 'operator_prefix': 'V'
    \ })
    call MultiMap({
        \ 'map_keys': 'I',
        \ 'command': 'call NextIndent(0, 1, 1)',
        \ 'map_args': '<silent>',
        \ 'operator_prefix': 'V'
    \ })
    call MultiMap({
        \ 'map_keys': 'K',
        \ 'command': 'call NextIndent(1, 1, 1)',
        \ 'map_args': '<silent>',
        \ 'operator_prefix': 'V'
    \ })

    if has("unix")
        "fix control-left/right mapping
        noremap [D B
        inoremap [D <C-o>B
        noremap [C W
        inoremap [C <C-o>Wx <C-w>q
    endif
