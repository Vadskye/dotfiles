" Settings:
    set shell=/bin/bash
    set winaltkeys=no
    filetype plugin indent on
    syntax on

    " undo option setting from mswin
    set selectmode=""
    set mousemodel=extend
    set keymodel=""
    set selection=inclusive

    " changes from vim-sensible
    set ruler
    set showcmd
    set wildmode=longest:full,full
    set wildmenu
    set complete-=i
    set smarttab
    set nrformats-=octal
    set autoread
    set scrolloff=2
    set sidescrolloff=5
    set display+=lastline

    " enable backspacing over everything in indent mode
    set backspace=indent,eol,start

    " deal with line breaks
    set textwidth=80
    set formatoptions=cq
    set wrapmargin=0
    set linebreak

    " Replace tabs
    set tabstop=4
    set shiftwidth=4
    set expandtab

    " don't warn if an existing swap files is found
    set shortmess+=A

    " don't beep
    set visualbell
    set noerrorbells

    set undofile

    " Change backup file and undo file locations
    set directory=$DOTFILES/vim/swp//
    set backupdir=$DOTFILES/vim/backup//
    set undodir=$DOTFILES/vim/undo//

    " use views, but don't save options (which alters working directory)
    set viewdir=$DOTFILES/vim/view
    set viewoptions-=options

    " wrapped text should retain its indentation
    set breakindent
    " highlight wrapped lines
    let &breakindentopt='sbr'
    let &showbreak='| '

    " In many terminal emulators the mouse works just fine, thus enable it.
    if has('mouse')
      set mouse=a
    endif

    " fix arrow key navigation in Unix
    if has('unix') && !has('nvim')
        map <silent> <Esc>OA <Up>
        map <silent> <Esc>OB <Down>
        map <silent> <Esc>OC <Right>
        map <silent> <Esc>OD <Left>
        map <silent> <80>K1 <Home>
        map <silent> <80>K4 <End>
    endif

    " use unix line endings by default
    set fileformats=unix,dos
    set fileformat=unix

    " don't redraw unnecessarily
    " set lazyredraw

    " always show status line
    set laststatus=2

    " bash on windows needs shellslash
    if has('win32') && (&shell =~ 'bash')
        set shellslash
    endif

    " use utf8
    set encoding=utf-8

    " use case-insensitive filename completion
    set wildignorecase

    " This makes file watching work better
    set backupcopy=yes

" Functions:
    function CaptureEx(command)
        redir => output
        silent! execute a:command
        redir END
        return output
    endfunction

    function ReadEx(command)
        let output = CaptureEx(a:command)
        put=output
    endfunction

    function! SetVerbose(level) abort
        if a:level > 0
            " if we're doing verbose for the first time, clear the existing log
            if &verbosefile == ""
                silent! !rm $DOTFILES/vim/verbose.log
            endif
            set verbosefile=$DOTFILES/vim/verbose.log
        else
            let &verbosefile = ""
        endif
        execute "set verbose=" . a:level
    endfunction

    function! ProfileStart() abort
        profile start profile.log
        profile func *
        profile file *
    endfunction

    function! ProfileQuit() abort
        profile stop
        noautocmd qall!
    endfunction

    " Map the same command in all modes: normal, operator-pending, and visual
    " Required args:
    "   map_keys (string): mapping for the command
    "   command (string): command to execute
    " Optional args:
    "   map_args (string): arguments for the map command, like '<silent>'
    "   operator_prefix: prefix before operator-pending mapping, like 'V'
    function! MultiMap(args)
        execute "nnoremap " . get(a:args, 'map_args', "") . " " . a:args.map_keys . " :<C-U>" . a:args.command . "<CR>"
        execute "onoremap " . get(a:args, 'map_args', "") . " " . a:args.map_keys . " " . get(a:args, 'operator_prefix', "") . ":<C-U>" . a:args.command . "<CR>"
        execute "xnoremap " . get(a:args, 'map_args', "") . " " . a:args.map_keys . " :<C-U> execute 'normal! gv' <Bar>" . a:args.command . "<CR>"
    endfunction

" Commands:
    command! -nargs=1 SetVerbose call SetVerbose(<f-args>)
    command! ViewVerbose edit $DOTFILES/vim/verbose.log

    command! ProfileStart call ProfileStart()
    command! ProfileQuit call ProfileQuit()

function! Matchaddpos(group, pos, ...) abort
    let patterns = []
    for location in a:pos
        call add(patterns, '\v%' . location[0] . 'l%' . location[1] . 'c'
            \ . '.{1,' . get(location, 2, 1) . '}'
        \ )
        echomsg string(a:pos)
    endfor
    let pattern = '\v(' . join(patterns, '|') . ')'
    return call('matchadd', [a:group, pattern] + a:000)
endfunction
