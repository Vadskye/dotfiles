" Mappings:
    " remap leader
    let mapleader = " "

    " Force typical Windows bindings
    nnoremap <C-s> :w<Enter>
    inoremap <C-s> <C-o>:w<Enter>
    nnoremap <C-z> u
    inoremap <C-z> <C-o>u
    " this doesn't work properly. need to figure out how <C-r> works.
    " map <C-y> <C-r>
    nnoremap <C-v> "*p
    inoremap <C-v> <C-o>"*p

    " keep Literal character input functionality
    inoremap <C-l> <C-v>

    " Ctrl-p to paste from registers makes more sense than Ctrl-r
    nnoremap <C-p> i<C-r><Esc>

    " quickly insert text from default register
    inoremap <C-p><C-p> <C-r>"
    nnoremap <C-p><C-p> i<C-r>"<Esc>
    cnoremap <C-p><C-p> <C-r>"

    " use ' to go to the mark directly and ` to go to the beginning of the line
    noremap ' `
    noremap ` '

    " Swap [] and {}
    noremap [ {
    onoremap [ {
    noremap ] }
    onoremap ] }
    noremap { [
    onoremap { [
    noremap } ]
    onoremap } ]
    " nunmap <buffer> [[
    " nunmap <buffer> ]]
    " nunmap <buffer> [m
    " nunmap <buffer> ]m

    " redesign delete/copy/replace
    " delete
    nnoremap dd dd
    nnoremap <silent> D :set opfunc=AppendDeleteToUnnamedRegister<CR>g@
    nnoremap <silent> DD :set opfunc=AppendDeleteToUnnamedRegister<CR>g@V<Space>
    nnoremap <Leader>d "*d
    nnoremap <Leader>dd "*dd
    " copy
    nnoremap c y
    nnoremap cc yy
    nnoremap <silent> C :set opfunc=AppendCopyToUnnamedRegister<CR>g@
    nnoremap <silent> CC :set opfunc=AppendCopyToUnnamedRegister<CR>g@V<Space>
    nnoremap <Leader>c "*y
    nnoremap <Leader>cc "*yy
    " replace
    nnoremap r c
    nnoremap rr cc
    nnoremap <silent> R :set opfunc=AppendChangeToUnnamedRegister<CR>g@
    nnoremap <silent> RR :set opfunc=AppendChangeToUnnamedRegister<CR>g@V<Space>
    nnoremap <Leader>r "*c
    nnoremap <Leader>rr "*cc
    " paste
    nnoremap <Leader>p "*p
    " paste from copied text
    nnoremap cp "0p
    nnoremap cP "0P

    " change single character
    " nnoremap b r
    " nnoremap B R

    " redesign word manipulation
    onoremap w iw
    onoremap W aw
    onoremap e iW
    onoremap E aW

    " faster command mode access
    nnoremap ; :

    " map control-backspace to delete the previous word
    inoremap <C-BS> <C-o>"_db
    noremap <C-BS> "_db
    noremap <C-Del> "_dve

    " compatibility with ConEmu hack
    imap ~!@#$% <C-BS>
    map ~!@#$% <C-BS>

    " switch files quickly
    nnoremap # :e #<Enter>

    " memory access is mapped to M to mirror mark access
    nnoremap M "

    " map line joining to " to retain functionality
    nnoremap " J

    " Increment numbers with alt-A
    nnoremap <A-a> <C-a>

    " Way to quickly exit insert mode
    inoremap jk <Esc>
    inoremap jj <Esc>

    " both methods of entering insert mode should use the same key
    nnoremap e i
    nnoremap E a

    " easy help access
    nnoremap h :h
    nnoremap h* K

    " better case switching
    nnoremap ~ g~

    " make macro shortcut more intuitive to mirror q
    nnoremap Q @
    nnoremap QQ @@
    nnoremap Qq @@

    nnoremap A ea

    " use enter to open new lines instead of o
    nnoremap <cr> o
    nnoremap <S-cr> O

    " enter blockwise visual mode
    nnoremap <Leader>v <C-v>

" Functions:
    function! AppendToUnnamedRegister(motion_type, operator)
        let unnamed_register = getreg('"')
        let setreg_mode = ''
        if a:motion_type == 'line'
            silent! execute "normal! '[V']" . a:operator
            let setreg_mode = 'l'
        elseif a:motion_type == 'block'
            silent! execute "normal! `[\<C-V>`]" . a:operator
        else
            silent! execute "normal! `[v`]" . a:operator
        endif
        let unnamed_register = unnamed_register . getreg('"')

        call setreg('"', unnamed_register, setreg_mode)
    endfunction

    function! AppendDeleteToUnnamedRegister(motion_type)
        call AppendToUnnamedRegister(a:motion_type, 'd')
    endfunction

    function! AppendCopyToUnnamedRegister(motion_type)
        call AppendToUnnamedRegister(a:motion_type, 'y')
    endfunction

    function! AppendChangeToUnnamedRegister(motion_type)
        call AppendToUnnamedRegister(a:motion_type, 'c')
    endfunction
